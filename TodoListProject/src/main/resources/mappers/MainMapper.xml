<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.spring.todoproject.main.mapper.IMainMapper">


	<!-- 이렇게 해주는거 귀찮 그냥 이름 맞춰주자 -> 이러면 안됌. <resultMap type="" id=""></resultMap> 
		Mybatis의 설정에 이름 바꾸는 설정을 작성해서 적용시켜준다 -> 더이상 이렇게 매번 작성하지 않아도 된다 -->

	<insert id="insertTodo">
		INSERT INTO freeboard
		(bno, title, writer, content)
		VALUES(freeboard_seq.NEXTVAL, #{title}, #{writer}, #{content})
	</insert>

	<!-- # 동적 SQL 쿼리 태그로 조건문을 사용하여 쿼리의 실행을 동적으로 제어할 수 있는 문법 중복된 SQL 쿼리를 피할 수 
		있고, 상황에 따른 능동적 대처가 가능합니다. 미리 쿼리문을 준비해 놓고, <include refid="이름(id)" /> 를 통해 
		삽입하여 사용합니다. -->



	<!-- CDATA: Character Data의 약자로, 마크업 언어에서 문자열 데이터를 표기하기 위한 문법입니다. 특수 문자 
		등을 순수한 문자로 표기하고 싶을 때 사용하는 태그입니다. -->


	<!-- 가장 많은 좋아요를 받은 추천 board_bno, board_like의 수 3개 추출-->
	<select id="mostLikeBno" resultType="mostLikeRecomdResponseDTO">
		SELECT brn.board_bno, brn.cnt AS boardLikeCnt
        FROM
        (
            SELECT ROWNUM AS rn, bcnt.* 
            FROM
            (
                SELECT count(*) AS cnt, board_bno
                FROM board_like bl
                GROUP BY board_bno
                ORDER BY cnt DESC
            ) bcnt
        ) brn
        <![CDATA[WHERE rn <= 4]]>
	</select>
	<!-- DTO 로 포장해도, 그냥 null 은 null 인대로 두고, 서비스에서 getProfColor 랑 조합하면 됨. -->
	
	
	<!-- 매개값으로 받은 board_bno의 사용자의 프로필컬러 hex, bno, user_id, board_content 값을 받아옴-->
	<select id="getMostLikeData" resultType="mostLikeRecomdResponseDTO">
		SELECT u.profile_color, b.board_bno, b.user_id, content
		FROM users u
		INNER JOIN  board b
		ON b.user_id = u.user_id
		WHERE board_bno = #{boardBno}
	</select>


	<select id="getNickname" resultType="string">
		SELECT nickname
		FROM users
		WHERE user_id = #{userId}
	</select>
	
	
	
	<insert id="insertMyTodo">
		INSERT INTO todo
		VALUES (seq_todo_no.NEXTVAL, #{userId}, #{clickDate}, #{todoContent}, 0)
	</insert>
	
	<select id="getlastTodoNo" resultType="string">
		SELECT seq_todo_no.CURRVAL FROM DUAL
	</select>
	
	<!-- checked true 일 때 -> 1 -->
	<update id="updateMyTodoChkO">
		update todo
		SET CHK_BTN = 1
		WHERE todo_no = #{todoNo}
	</update>
	
	
	<!-- checked false 일 때 -> 0 -->
	<update id="updateMyTodoChkX">
		update todo
		SET CHK_BTN = 0
		WHERE todo_no = #{todoNo}
	</update>
	
	<!-- 클릭된 Date와 userId 에 해당하는 모든 todo 조회 -->
	<select id="getTodoOfDate" resultType="todo">
		SELECT * FROM todo
		WHERE user_id = #{userId} AND click_date = #{clickDate}
	</select>
	
	<!-- todo 삭제 -->
	<delete id="deleteTodo">
		DELETE FROM todo
		WHERE todo_no = #{todoNo}
	</delete>

</mapper>















